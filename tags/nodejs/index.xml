<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Bennett Notes</title>
    <link>https://www.bennettnotes.com/tags/nodejs/</link>
    <description>Recent content in Nodejs on Bennett Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dave@bennettnotes.com (Dave Bennett)</managingEditor>
    <webMaster>dave@bennettnotes.com (Dave Bennett)</webMaster>
    <lastBuildDate>Tue, 05 Mar 2019 07:14:19 -0500</lastBuildDate>
    
	<atom:link href="https://www.bennettnotes.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Read System Environment Variables in Angular</title>
      <link>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</link>
      <pubDate>Tue, 05 Mar 2019 07:14:19 -0500</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</guid>
      <description>A few weeks back I was working on a project where I needed to read system environment in Angular 7 from a Docker container before it builds. After days of searching, I came across a solution from multiple sources on the internet.
Keep one thing in mind, you will only be able to inject environment variables before your Angular app builds. Unlike Nodejs, you will not get real time access because you are running in an browser environment.</description>
    </item>
    
    <item>
      <title>JWT Tokens in Express and NodeJS</title>
      <link>https://www.bennettnotes.com/jwt-tokens-in-express-and-nodejs/</link>
      <pubDate>Sun, 22 Apr 2018 17:53:29 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/jwt-tokens-in-express-and-nodejs/</guid>
      <description>The JSON Web Token (JWT) is the easiest standard for protecting APIs and passing in claims data. A JSON Web token allows the server to verify the authenticity of the user and provide them access to protected API routes and data.&amp;nbsp; A simple JWT flow goes as follows:
 The user sends login credentials to the server The server verifies user against&amp;nbsp;the database then returns a JWT token if valid The user sends that token in the header with every request to API.</description>
    </item>
    
    <item>
      <title>Build a Multiplayer game using Javascript</title>
      <link>https://www.bennettnotes.com/build-a-mmo-game-with-javascript-and-nodejs/</link>
      <pubDate>Sun, 10 Dec 2017 22:27:10 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/build-a-mmo-game-with-javascript-and-nodejs/</guid>
      <description>In this tutorial, we will take a look at how to build a multiplayer game using Javascript and NodeJS. My goal is to take you through the basic setup so that you can begin focusing on the actual gameplay. When building a full-scale MMO, there are a lot of things to consider like load balancing, network contingencies, etc. For now, we are going to focus on the bare minimumÂ just to help you get an understanding of how you can creatively and effectively use the available tools of NodeJS to get started.</description>
    </item>
    
  </channel>
</rss>