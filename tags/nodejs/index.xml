<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Bennett Notes</title>
    <link>https://www.bennettnotes.com/tags/nodejs/</link>
    <description>Recent content in Nodejs on Bennett Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dave@bennettnotes.com (Dave Bennett)</managingEditor>
    <webMaster>dave@bennettnotes.com (Dave Bennett)</webMaster>
    <lastBuildDate>Wed, 17 Apr 2019 08:36:47 -0400</lastBuildDate>
    
	<atom:link href="https://www.bennettnotes.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kafka Nodejs Example with Producers and Consumers</title>
      <link>https://www.bennettnotes.com/post/kafka-nodejs-example/</link>
      <pubDate>Wed, 17 Apr 2019 08:36:47 -0400</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/kafka-nodejs-example/</guid>
      <description>Let&amp;rsquo;s take a look at a Kafka Nodejs example with Producers and Consumers. We will be creating a kafka producer and consumer in Nodejs. If you haven&amp;rsquo;t already, check out my previous tutorial on how to setup Kafka in docker. I already created a topic called cat that I will be using.
Kafka Producer We are going to use the npm module called kafka-node to interface with our kafka and zookeeper.</description>
    </item>
    
    <item>
      <title>Flying a Drone With Javascript</title>
      <link>https://www.bennettnotes.com/post/flying-a-drone-with-javascript/</link>
      <pubDate>Mon, 15 Apr 2019 05:46:53 -0400</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/flying-a-drone-with-javascript/</guid>
      <description>Flying a drone with javascript probably sounds crazy and hard. Do I use a framework? Will the 10 GB of node_modules weigh it down? NOPE! It&amp;rsquo;s all pretty simple to do.
The other day I came across a neat drone called the DJI Tello. It is a relatively inexpensive quadcopter that offers a simple SDK which can be accessed over WiFI. Using the NodeJS dgram library, I can send commands via UDP to the drone to perform actions such as takeoff, left 20, and land.</description>
    </item>
    
    <item>
      <title>Scrape Google Search Using Puppeteer</title>
      <link>https://www.bennettnotes.com/post/scrape-google-search-using-puppeteer/</link>
      <pubDate>Mon, 25 Mar 2019 05:50:08 -0400</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/scrape-google-search-using-puppeteer/</guid>
      <description>For my side project, I needed to scrape Google search using a headless browser. I ended up using the Nodejs library called puppeteer. It&amp;rsquo;s a headless browser that uses chromium.
Install puppeteer npm install puppeteer Scrape Google Search using Puppeteer First, let&amp;rsquo;s go to the google homepage, type something in, and click the search button.
try { (async () =&amp;gt; { const browser = await puppeteer.launch(); const page = await browser.</description>
    </item>
    
    <item>
      <title>Read System Environment Variables in Angular</title>
      <link>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</link>
      <pubDate>Tue, 05 Mar 2019 07:14:19 -0500</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</guid>
      <description>A few weeks back I was working on a project where I needed to read system environment in Angular 7 from a Docker container before it builds. After days of searching, I came across a solution from multiple sources on the internet.
Keep one thing in mind, you will only be able to inject environment variables before your Angular app builds. Unlike Nodejs, you will not get real time access because you are running in an browser environment.</description>
    </item>
    
    <item>
      <title>JWT Tokens in Express and NodeJS</title>
      <link>https://www.bennettnotes.com/jwt-tokens-in-express-and-nodejs/</link>
      <pubDate>Sun, 22 Apr 2018 17:53:29 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/jwt-tokens-in-express-and-nodejs/</guid>
      <description>The JSON Web Token (JWT) is the easiest standard for protecting APIs and passing in claims data. A JSON Web token allows the server to verify the authenticity of the user and provide them access to protected API routes and data.&amp;nbsp; A simple JWT flow goes as follows:
 The user sends login credentials to the server The server verifies user against&amp;nbsp;the database then returns a JWT token if valid The user sends that token in the header with every request to API.</description>
    </item>
    
    <item>
      <title>Build a Multiplayer game using Javascript</title>
      <link>https://www.bennettnotes.com/build-a-mmo-game-with-javascript-and-nodejs/</link>
      <pubDate>Sun, 10 Dec 2017 22:27:10 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/build-a-mmo-game-with-javascript-and-nodejs/</guid>
      <description>In this tutorial, we will take a look at how to build a multiplayer game using Javascript and NodeJS. My goal is to take you through the basic setup so that you can begin focusing on the actual gameplay. When building a full-scale MMO, there are a lot of things to consider like load balancing, network contingencies, etc. For now, we are going to focus on the bare minimumÂ just to help you get an understanding of how you can creatively and effectively use the available tools of NodeJS to get started.</description>
    </item>
    
  </channel>
</rss>