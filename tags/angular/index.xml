<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>angular on Bennett Notes</title>
    <link>https://www.bennettnotes.com/tags/angular/</link>
    <description>Recent content in angular on Bennett Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dave@bennettnotes.com (Dave Bennett)</managingEditor>
    <webMaster>dave@bennettnotes.com (Dave Bennett)</webMaster>
    <lastBuildDate>Tue, 05 Mar 2019 07:14:19 -0500</lastBuildDate>
    
	<atom:link href="https://www.bennettnotes.com/tags/angular/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Read System Environment Variables in Angular</title>
      <link>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</link>
      <pubDate>Tue, 05 Mar 2019 07:14:19 -0500</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/post/angular-read-system-environment-variables/</guid>
      <description>A few weeks back I was working on a project where I needed to read system environment in Angular 7 from a Docker container before it builds. After days of searching, I came across a solution from multiple sources on the internet.
Keep one thing in mind, you will only be able to inject environment variables before your Angular app builds. Unlike Nodejs, you will not get real time access because you are running in an browser environment.</description>
    </item>
    
    <item>
      <title>Angular 4 input only numbers Directive</title>
      <link>https://www.bennettnotes.com/angular-4-input-numbers-directive/</link>
      <pubDate>Wed, 07 Mar 2018 00:11:23 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/angular-4-input-numbers-directive/</guid>
      <description>I was working on a project in Angular 4 and needed to implement input fields that only accept numerical values. My first thought was to simply add the HTML5 type=&amp;#8221;number&amp;#8221; to the input. Unfortunately, this isn&amp;#8217;t supported in Internet Explorer 10 and some of the clients would most likely be using Internet Explorer 10. My only other option was to implement a directive. Thanks to this StackOverflow answer, I was able to modify it to my needs.</description>
    </item>
    
    <item>
      <title>Implementing Token Interceptor and Retry in Angular 4</title>
      <link>https://www.bennettnotes.com/implementing-token-interceptor-and-retry-in-angular-4-2/</link>
      <pubDate>Fri, 23 Feb 2018 14:46:58 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/implementing-token-interceptor-and-retry-in-angular-4-2/</guid>
      <description>If you are building a web application using Angular 4 or Angular 5 there&amp;#8217;s a good chance that you might be working with JWT tokens. Luckily, implementing token interceptor and retry in Angular 4 and beyond is very easy thanks to the new HTTP Interceptors. Using this, we can add an authorization header to every outbound request while also implementing a retry mechanism for requests that fail due to an expired token.</description>
    </item>
    
    <item>
      <title>Implementing Token Interceptor and Retry in Angular 4</title>
      <link>https://www.bennettnotes.com/implementing-token-interceptor-and-retry-in-angular-4/</link>
      <pubDate>Fri, 23 Feb 2018 14:46:58 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/implementing-token-interceptor-and-retry-in-angular-4/</guid>
      <description>If you are building a web application using Angular 4 or Angular 5 there&amp;#8217;s a good chance that you might be working with JWT tokens. Luckily, implementing token interceptor and retry in Angular 4 and beyond is very easy thanks to the new HTTP Interceptors. Using this, we can add an authorization header to every outbound request while also implementing a retry mechanism for requests that fail due to an expired token.</description>
    </item>
    
    <item>
      <title>Subscribe to variable change in Angular 4 Service</title>
      <link>https://www.bennettnotes.com/subscribe-to-variable-change-in-angular-4-service/</link>
      <pubDate>Fri, 22 Dec 2017 14:40:18 +0000</pubDate>
      <author>dave@bennettnotes.com (Dave Bennett)</author>
      <guid>https://www.bennettnotes.com/subscribe-to-variable-change-in-angular-4-service/</guid>
      <description>If you want to subscribe to variable change in Angular 4 service or Angular 5 service, you can use something called the BehaviorSubject from the rxjs library. A behavior subject is like an observable, except that it must be created with an initial value as it is must always return a value even if the subject hasn&amp;#8217;t been updated. A behavior subject will always emit it&amp;#8217;s first value as soon as it&amp;#8217;s described.</description>
    </item>
    
  </channel>
</rss>